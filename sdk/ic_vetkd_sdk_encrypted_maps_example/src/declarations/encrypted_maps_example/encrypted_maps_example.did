type AccessRights = variant { Read; ReadWrite; ReadWriteManage };
type ByteBuf = record { inner : blob };
type Result = variant { Ok : opt ByteBuf; Err : text };
type Result_1 = variant { Ok : vec record { ByteBuf; ByteBuf }; Err : text };
type Result_2 = variant { Ok : ByteBuf; Err : text };
type Result_3 = variant { Ok : opt AccessRights; Err : text };
type Result_4 = variant { Ok : vec ByteBuf; Err : text };
service : () -> {
  get_accessible_shared_map_names : () -> (
      vec record { principal; ByteBuf },
    ) query;
  get_encrypted_value : (principal, ByteBuf, ByteBuf) -> (Result) query;
  get_encrypted_values_for_map : (principal, ByteBuf) -> (Result_1) query;
  get_encrypted_vetkey : (principal, ByteBuf, ByteBuf) -> (Result_2);
  get_user_rights : (principal, ByteBuf, principal) -> (Result_3) query;
  get_vetkey_verification_key : () -> (ByteBuf);
  insert_encrypted_value : (principal, ByteBuf, ByteBuf, ByteBuf) -> (Result);
  remove_encrypted_value : (principal, ByteBuf, ByteBuf) -> (Result);
  remove_map_values : (principal, ByteBuf) -> (Result_4);
  remove_user : (principal, ByteBuf, principal) -> (Result_3);
  set_user_rights : (principal, ByteBuf, principal, AccessRights) -> (Result_3);
}
